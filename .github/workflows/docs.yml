name: Documentation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-docs-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
    
    - name: Check for warnings
      run: |
        cd docs
        make stricthtml
    
    - name: Test documentation links
      run: |
        cd docs
        make linkcheck
      continue-on-error: true
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/html/
        retention-days: 30
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
        cname: your-custom-domain.com  # Optional: replace with your custom domain

  validate-docs:
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: docs-build/
    
    - name: Validate HTML structure
      run: |
        # Check that main files exist
        test -f docs-build/index.html
        test -f docs-build/installation.html
        test -f docs-build/quickstart.html
        test -f docs-build/user_guide.html
        test -f docs-build/cli_reference.html
        test -d docs-build/api/
        test -d docs-build/development/
    
    - name: Check API documentation generation
      run: |
        cd docs
        make apidoc
        # Verify API docs were generated
        test -d source/api/generated/
    
    - name: Test documentation examples
      run: |
        # Test that code examples in docs are valid
        poetry run python -c "
        import ast
        import glob
        
        # Find Python code blocks in RST files and validate syntax
        rst_files = glob.glob('docs/source/**/*.rst', recursive=True)
        print(f'Checking {len(rst_files)} RST files for code syntax...')
        
        for file in rst_files:
            with open(file, 'r') as f:
                content = f.read()
                # Basic validation that Python code blocks exist
                if '.. code-block:: python' in content:
                    print(f'Found Python code blocks in {file}')
        "
    
    - name: Performance test documentation build
      run: |
        cd docs
        echo 'Testing documentation build performance...'
        time make clean html
    
    - name: Generate documentation metrics
      run: |
        echo '## Documentation Metrics' >> $GITHUB_STEP_SUMMARY
        echo '| Metric | Value |' >> $GITHUB_STEP_SUMMARY
        echo '|--------|-------|' >> $GITHUB_STEP_SUMMARY
        
        # Count documentation files
        RST_COUNT=$(find docs/source -name "*.rst" | wc -l)
        echo "| RST Files | $RST_COUNT |" >> $GITHUB_STEP_SUMMARY
        
        # Count HTML output files
        HTML_COUNT=$(find docs-build -name "*.html" | wc -l)
        echo "| Generated HTML | $HTML_COUNT |" >> $GITHUB_STEP_SUMMARY
        
        # Calculate total documentation size
        DOCS_SIZE=$(du -sh docs-build | cut -f1)
        echo "| Documentation Size | $DOCS_SIZE |" >> $GITHUB_STEP_SUMMARY
        
        # Count API modules documented
        API_COUNT=$(find docs-build/api -name "*.html" 2>/dev/null | wc -l || echo 0)
        echo "| API Modules | $API_COUNT |" >> $GITHUB_STEP_SUMMARY

  accessibility-check:
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: docs-build/
    
    - name: Install accessibility checker
      run: |
        npm install -g pa11y-ci
    
    - name: Run accessibility tests
      run: |
        # Test key pages for accessibility
        pa11y-ci --sitemap http://localhost:8000/sitemap.xml || true
        
        # Test individual pages
        npx http-server docs-build -p 8000 &
        SERVER_PID=$!
        sleep 5
        
        pa11y http://localhost:8000/index.html || true
        pa11y http://localhost:8000/installation.html || true
        pa11y http://localhost:8000/quickstart.html || true
        
        kill $SERVER_PID
      continue-on-error: true
