name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=grit_guardian --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run black (code formatting check)
      run: |
        poetry run black --check --diff grit_guardian tests
      continue-on-error: true
    
    - name: Run isort (import sorting check)
      run: |
        poetry run isort --check-only --diff grit_guardian tests
      continue-on-error: true
    
    - name: Run flake8 (linting)
      run: |
        poetry run flake8 grit_guardian tests
      continue-on-error: true
    
    - name: Run mypy (type checking)
      run: |
        poetry run mypy grit_guardian
      continue-on-error: true

  integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v
    
    - name: Test CLI installation and basic commands
      run: |
        poetry install
        poetry run grit-guardian --help
        poetry run gg --help
    
    - name: Test sample data initialization
      run: |
        # Test in a temporary directory
        mkdir -p /tmp/grit-guardian-test
        cd /tmp/grit-guardian-test
        
        # Set up temporary config directory
        export XDG_CONFIG_HOME=/tmp/grit-guardian-test/.config
        mkdir -p $XDG_CONFIG_HOME
        
        # Test initialization
        poetry run -C ${{ github.workspace }} gg init
        
        # Test basic commands
        poetry run -C ${{ github.workspace }} gg list
        poetry run -C ${{ github.workspace }} gg status
        poetry run -C ${{ github.workspace }} gg pet
        poetry run -C ${{ github.workspace }} gg weekly
        poetry run -C ${{ github.workspace }} gg streaks

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run safety check (dependency vulnerabilities)
      run: |
        poetry run pip install safety
        poetry run safety check
      continue-on-error: true
    
    - name: Run bandit (security linting)
      run: |
        poetry run pip install bandit
        poetry run bandit -r grit_guardian -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

